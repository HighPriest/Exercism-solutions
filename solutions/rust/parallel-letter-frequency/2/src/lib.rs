#![deny(clippy::all)]
#![warn(clippy::pedantic)]
#![allow(clippy::cast_possible_wrap)]
#![allow(clippy::cast_sign_loss)]

use rayon::prelude::*;
use std::collections::HashMap;

// Solution by @victorprokhorov
// https://exercism.org/tracks/rust/exercises/parallel-letter-frequency/solutions/victorprokhorov

// Rayon is a data-parallelism library that makes it easy to convert sequential computations into parallel.

// This function calculates the frequency of each letter in a collection of text inputs,
// distributing the work across multiple threads.
#[must_use]
pub fn frequency(input: &[&str], worker_count: usize) -> HashMap<char, usize> {
    // Calculate the size of each chunk of input strings to be processed by a worker.
    // We add 1 to ensure that even if `input.len()` is smaller than `worker_count`,
    // each chunk gets at least one element (or a small number).
    let chunk_size = input.len() / worker_count + 1;

    // Divide the `input` slice into smaller chunks.
    // `chunks(chunk_size)` creates an iterator that yields slices of `input`
    // of the specified `chunk_size`.
    let input_chunks = input.chunks(chunk_size).collect::<Vec<&[&str]>>();

    // Initialize a vector of HashMaps, where each HashMap will store the partial
    // letter frequencies calculated by a single worker thread.
    // The number of partial maps is determined by the minimum of:
    // 1. The `worker_count`.
    // 2. The actual number of input chunks available (`input_chunks.len()`).
    // This prevents creating more workers/maps than necessary if `worker_count` is very high.
    let mut partial_frequency_maps =
        vec![
            HashMap::<char,usize>::new(); // vector content type
            worker_count    // vector size
                .min(input.len())
                .min(input_chunks.len())
        ];

    // Process each partial_frequency_map in parallel using Rayon.
    // `par_iter_mut()` creates a parallel mutable iterator over `partial_frequency_maps`.
    // `enumerate()` adds an index `i` to each `partial_map_for_worker`.
    // `for_each()` executes the provided closure for each item in parallel.
    partial_frequency_maps.par_iter_mut().enumerate().for_each(
        |(worker_index, partial_map_for_worker)| {
            // Iterate through the strings in the current worker's assigned input chunk.
            // `input_chunks[worker_index]` retrieves the specific slice of strings
            // that this worker is responsible for.
            for text_line in input_chunks[worker_index] {
                // Iterate through each character in the current `text_line`.
                for character in text_line.chars() {
                    // Check if the character is an alphabetic letter.
                    if character.is_alphabetic() {
                        // Convert the character to lowercase to ensure case-insensitivity
                        // (e.g., 'A' and 'a' count towards the same 'a' frequency).
                        let lowercase_char = character.to_ascii_lowercase();

                        // Get an entry for the `lowercase_char` in the current worker's
                        // `partial_map_for_worker`.
                        partial_map_for_worker
                            .entry(lowercase_char)
                            // If the entry already exists (the character has been seen),
                            // increment its count by 1.
                            .and_modify(|current_count| *current_count += 1)
                            // If the entry does not exist (this is the first time seeing the character),
                            // insert it with an initial count of 1.
                            .or_insert(1);
                    }
                }
            }
        },
    );

    // Initialize a new HashMap to store the final, merged letter frequencies.
    let mut final_merged_frequencies = HashMap::new();

    // Iterate through each `partial_map` generated by the worker threads.
    for partial_map in partial_frequency_maps {
        // For each key-value pair (character, count) in the `partial_map`...
        for (character_key, character_count) in partial_map {
            // Get an entry for the `character_key` in the `final_merged_frequencies` map.
            final_merged_frequencies
                .entry(character_key)
                // If the character already exists in the final map,
                // add the `character_count` from the current `partial_map` to its existing count.
                .and_modify(|existing_total_count| *existing_total_count += character_count)
                // If the character does not exist in the final map,
                // insert it with the `character_count` from the current `partial_map`.
                .or_insert(character_count);
        }
    }

    // Return the HashMap containing the total frequency of each letter.
    final_merged_frequencies
}
